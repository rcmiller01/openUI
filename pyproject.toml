[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "open-deep-coder"
version = "0.1.0"
description = "A multi-agent coding workflow running on LangGraph/MCP-style toolbelt"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "rcmiller01", email = "devnull@example.com" }
]
keywords = [
    "ai",
    "coding",
    "multi-agent",
    "workflow",
    "automation",
    "langraph",
    "mcp"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "websockets>=12.0",
    "langchain>=0.1.0",
    "langgraph>=0.1.0",
    "pydantic>=2.0.0",
    "httpx>=0.25.0",
    "python-multipart>=0.0.6",
    "python-dotenv>=1.0.0",
    "aiofiles>=23.0.0",
    "pygments>=2.16.0",
    "tree-sitter>=0.20.0",
    "tree-sitter-python>=0.20.0",
    "tree-sitter-javascript>=0.20.0",
    "tree-sitter-typescript>=0.20.0",
    "ollama>=0.1.0",
    "openai>=1.0.0",
    "anthropic>=0.5.0",
    "click>=8.0.0",
    "rich>=13.0.0",
    "cryptography>=41.0.0",
    "jsonschema>=4.19.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/rcmiller01/openUI"
Repository = "https://github.com/rcmiller01/openUI"
Issues = "https://github.com/rcmiller01/openUI/issues"

[project.scripts]
open-deep-coder = "open_deep_coder.cli:main"
openui = "open_deep_coder.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "S101", # use of assert detected
]

[tool.ruff.per-file-ignores]
"tests/**/*" = ["S101"]
"backend/tmp_health_check.py" = ["E402"]

# Black configuration
[tool.black]
target-version = ["py311"]
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
files = ["backend", "src"]

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
  "backend.integrations.lsp_enhanced",
  "backend.integrations.mcp",
  "backend.integrations.debug",
  "backend.integrations.proxmox",
  "backend.integrations.n8n",
  "backend.test_server",
]
ignore_errors = true

[[tool.mypy.overrides]]
module = "backend.main"
ignore_missing_imports = false
disallow_untyped_defs = true
warn_unreachable = true
allow_redefinition = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config --cov=src --cov-report=term-missing --cov-report=xml --maxfail=1 --disable-warnings"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/__init__.py",
    "*/cli.py",  # CLI might have special testing requirements
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test
